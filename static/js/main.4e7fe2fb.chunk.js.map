{"version":3,"sources":["Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Track","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addTrack","bind","assertThisInitialized","removeTrack","renderAction","inherits","createClass","key","value","ev","onAdd","target","onRemove","track","isRemoval","react_default","a","createElement","className","onClick","name","artist","album","React","Component","TrackList","apply","arguments","tracks","map","Track_Track_Track","id","SearchResults","TrackList_TrackList_TrackList","searchResults","Playlist","handleNameChange","event","onNameChange","defaultValue","onChange","playlistTracks","App","state","playlistName","updatePlaylistName","newPlaylistTracks","push","setState","trackIndex","find","savedTrack","newPlaylist","splice","SearchResults_SearchResults_SearchResults","Playlist_Playlist_Playlist","Boolean","window","location","hostname","match","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e7fe2fb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Track.css';\r\n\r\nexport class Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n        this.renderAction = this.renderAction.bind(this);\r\n    }\r\n\r\n    addTrack(ev) {\r\n        this.props.onAdd(ev.target.value);\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return (\r\n                <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n            );\r\n        } else {\r\n            return (\r\n                <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{/* <!-- track name will go here --> */}{this.props.name}</h3>\r\n                    <p>{/* <!-- track artist will go here --> | <!--\r\n                     track album will go here --> */}{this.props.artist} | {this.props.album}</p>\r\n                </div>\r\n                <button className=\"Track-action\">{/* <!-- + or - will go here --> */}{this.renderAction()}</button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Track } from '../Track/Track';\r\nimport './TrackList.css';\r\n\r\nexport class TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {/*\r\n                <!-- You will add a map method that\r\n                         renders a set of Track components --> */}\r\n                {this.props.tracks.map((track) => {\r\n                    return <Track key={track.id}\r\n                                  artist={track.artist}\r\n                                  album={track.album}\r\n                                  name={track.name}\r\n                                  onAdd={this.props.onAdd}\r\n                                  track={track}\r\n                                  onRemove={this.props.onRemove}\r\n                                  isRemoval={this.props.isRemoval}\r\n                                  />\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { TrackList } from '../TrackList/TrackList';\r\nimport './SearchResults.css';\r\n\r\nexport class SearchResults extends React.Component {\r\n\r\n    render() {\r\n      return (\r\n          <div className=\"SearchResults\">\r\n              <h2>Results</h2>\r\n              {/*\r\n              <!-- Add a TrackList component --> */}\r\n              <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\r\n          </div>\r\n      );\r\n    };\r\n}","import React from 'react';\r\nimport './Playlist.css';\r\nimport { TrackList } from '../TrackList/TrackList';\r\n\r\nexport class Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={'New Playlist'} onChange={this.handleNameChange}/>\r\n                {/*\r\n                <!-- Add a TrackList component --> */}\r\n                <TrackList tracks={this.props.playlistTracks}\r\n                           onRemove={this.props.onRemove}\r\n                           isRemoval={true}\r\n                           />\r\n                <button className=\"Playlist-save\">SAVE TO SPOTIFY</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { SearchResults } from \"../SearchResults/SearchResults\";\nimport {Playlist} from \"../Playlist/Playlist\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [{name: 'Hungry - Remix', artist: 'Niklas Ibach', album: 'unknown', id: 5},\n        {name: 'Prayer in C', artist: 'Lilly Wood & The Pricks', album: 'cool', id: 6}],\n      playlistName: 'chill',\n      playlistTracks: [{name: 'Follow you', artist: 'twocolors', album: 'unknown', id: 1},\n                       {name: 'Fade', artist: 'Alan Walker', album: 'Best', id: 2},\n                       {name: 'Under the Sun', artist: 'Miskeyz', album: 'unknown', id: 3},\n                       {name: 'To California', artist: 'J Lisk', album: 'anything', id: 4}]\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n  }\n\n  addTrack(track) {\n    //!this.state.playlistTracks.find((savedTrack) => {return savedTrack.id === track.id})\n    if (true) {\n      let oldPlaylistTracks = this.state.playlistTracks;\n      //{name: track.name, artist: track.artist, album: track.album, id: track.id}\n      let newPlaylistTracks = oldPlaylistTracks.push(track);\n      this.setState({\n        playlistTracks: newPlaylistTracks\n      });\n    }\n  }\n\n  removeTrack(track) {\n    const trackIndex = this.state.playlistTracks.find((savedTrack) => {return savedTrack.id === track.id});\n    if (trackIndex) {\n      const oldPlaylist = this.state.playlistTracks;\n      const newPlaylist = oldPlaylist.splice(trackIndex,1);\n      this.setState({\n        playlistTracks: newPlaylist\n      });\n    }\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  }\n\n  render() {\n    return (\n        <div>\n          <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n          <div className=\"App\">\n            {/*\n            <!-- Add a SearchBar component --> */}\n            <div className=\"App-playlist\">\n              {/*\n              <!-- Add a SearchResults component --> */}\n              <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n              {/*\n              <!-- Add a Playlist component --> */}\n              <Playlist playlistName={this.state.playlistName}\n                        playlistTracks={this.state.playlistTracks}\n                        onRemove={this.removeTrack}\n                        onNameChange={this.updatePlaylistName}\n                        />\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}