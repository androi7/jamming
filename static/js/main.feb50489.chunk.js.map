{"version":3,"sources":["Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/SearchBar/SearchBar.js","util/Spotify.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Track","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addTrack","bind","assertThisInitialized","removeTrack","renderAction","inherits","createClass","key","value","onAdd","track","onRemove","isRemoval","react_default","a","createElement","className","onClick","name","artist","album","React","Component","TrackList","apply","arguments","tracks","map","Track_Track_Track","id","SearchResults","TrackList_TrackList_TrackList","searchResults","Playlist","handleNameChange","event","onNameChange","target","defaultValue","onChange","playlistTracks","onSave","SearchBar","state","searchTerm","search","handleTermChange","onSearch","setState","placeholder","Spotify","spotifyUrl","concat","accessToken","expired","_search","asyncToGenerator","regenerator_default","mark","_callee3","term","response","jsonResponse","wrap","_context3","prev","next","console","log","fetch","headers","Authorization","sent","ok","json","abrupt","items","artists","uri","t0","stop","getAccessToken","accessTokenUrl","window","location","href","match","expiresIn","toString","split","_callee","_context","Promise","r","setTimeout","history","pushState","_x","savePlaylist","playlist","trackURIs","headerAuth","Content-Type","userId","playlistID","_callee2","response1","jsonResponse1","response2","jsonResponse2","response3","jsonResponse3","_context2","method","body","JSON","stringify","uris","App","playlistName","updatePlaylistName","find","savedTrack","newPlaylistTracks","push","trackIndex","findIndex","newPlaylist","splice","_this2","then","res","SearchBar_SearchBar_SearchBar","SearchResults_SearchResults_SearchResults","Playlist_Playlist_Playlist","Boolean","hostname","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.feb50489.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Track.css';\r\n\r\nexport class Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n        this.renderAction = this.renderAction.bind(this);\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return (\r\n                <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n            );\r\n        } else {\r\n            return (\r\n                <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{/* <!-- track name will go here --> */}{this.props.name}</h3>\r\n                    <p>{/* <!-- track artist will go here --> | <!--\r\n                     track album will go here --> */}{this.props.artist} | {this.props.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Track } from '../Track/Track';\r\nimport './TrackList.css';\r\n\r\nexport class TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {/*\r\n                <!-- You will add a map method that\r\n                         renders a set of Track components --> */}\r\n                {this.props.tracks.map((track) => {\r\n                    return <Track key={track.id}\r\n                                  artist={track.artist}\r\n                                  album={track.album}\r\n                                  name={track.name}\r\n                                  onAdd={this.props.onAdd}\r\n                                  track={track}\r\n                                  onRemove={this.props.onRemove}\r\n                                  isRemoval={this.props.isRemoval}\r\n                                  />\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { TrackList } from '../TrackList/TrackList';\r\nimport './SearchResults.css';\r\n\r\nexport class SearchResults extends React.Component {\r\n\r\n    render() {\r\n      return (\r\n          <div className=\"SearchResults\">\r\n              <h2>Results</h2>\r\n              {/*\r\n              <!-- Add a TrackList component --> */}\r\n              <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\r\n          </div>\r\n      );\r\n    };\r\n}","import React from 'react';\r\nimport './Playlist.css';\r\nimport { TrackList } from '../TrackList/TrackList';\r\n\r\nexport class Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={'New Playlist'} onChange={this.handleNameChange}/>\r\n                {/*\r\n                <!-- Add a TrackList component --> */}\r\n                <TrackList tracks={this.props.playlistTracks}\r\n                           onRemove={this.props.onRemove}\r\n                           isRemoval={true}\r\n                           />\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nexport class SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            searchTerm: ''\r\n        };\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search() {\r\n        this.props.onSearch(this.state.searchTerm);\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({\r\n            searchTerm: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        );\r\n    };\r\n}","const Spotify = (function() {\r\n    const client_id = '7955f14ccbde43e296449c75b89f4022';\r\n    const redirect_uri = 'https://androi7.github.io/jamming/'; //http://localhost:3000/\r\n    const spotifyUrl = `https://accounts.spotify.com/authorize?client_id=${client_id}&scope=playlist-modify-public&redirect_uri=${redirect_uri}&response_type=token`;\r\n    let accessToken = '';\r\n    let expired = '';\r\n\r\n    function getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        const accessTokenUrl = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresIn = window.location.href.match(/expires_in=([^&]*)/);\r\n        if (accessTokenUrl && expiresIn) {\r\n            accessToken = accessTokenUrl.toString().split(\"=\")[1];\r\n            expired = expiresIn[1];\r\n            console.log(\"Test: \"+window.location.href);\r\n            (async () => {\r\n                await new Promise(r => setTimeout(r, expired*1000));\r\n                accessToken = '';\r\n            })();\r\n            //window.setTimeout(() => accessToken = '', expired * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            console.log(\"Access Token: \" + accessToken);\r\n            console.log(\"Expired: \" + expired + \"expiresIn: \"+expiresIn);\r\n        } else {\r\n            window.location = spotifyUrl;\r\n        }\r\n\r\n    }\r\n\r\n    async function search(term) {\r\n        console.log('Search Bearer: '+ accessToken);\r\n        try {\r\n            const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n                                        headers: {Authorization: `Bearer ${accessToken}`}\r\n            });\r\n            if (response.ok) {\r\n                const jsonResponse = await response.json();\r\n                return jsonResponse.tracks.items.map((track) => {\r\n                    return {\r\n                        id: track.id,\r\n                        name: track.name,\r\n                        artist: track.artists[0].name,\r\n                        album: track.album.name,\r\n                        uri: track.uri\r\n                    }\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        /*\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {Authorization: `Bearer ${accessToken}`}\r\n        }).then((response) => { return response.json()})\r\n            .then((resJson) => {\r\n                return resJson.tracks.items.map((track) => {\r\n                    return {\r\n                        id: track.id,\r\n                        name: track.name,\r\n                        artist: track.artists[0].name,\r\n                        album: track.album.name,\r\n                        uri: track.uri\r\n                    }\r\n                });\r\n            });\r\n            */\r\n    }\r\n\r\n    function savePlaylist(playlist, trackURIs) {\r\n        console.log(trackURIs);\r\n        if (!(playlist && trackURIs)) {\r\n            return;\r\n        }\r\n\r\n        const headerAuth = {\r\n            'Authorization': `Bearer ${accessToken}`,\r\n            'Content-Type': 'application/json'\r\n        };\r\n        let userId = '';\r\n        let playlistID = '';\r\n\r\n        // first variant\r\n        /*\r\n        fetch('https://api.spotify.com/v1/me', {\r\n            headers: headerAuth\r\n        }).then((response) => response.json())\r\n            .then((resJson) => {\r\n                userId = resJson.id;\r\n                console.log(\"User name: \" + resJson['display_name']);\r\n                console.log(\"User id: \" + userId);\r\n                return resJson['display_name'];\r\n            }).then(() => {\r\n            fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                method: 'POST',\r\n                headers: headerAuth,\r\n                body: JSON.stringify({name: playlist})\r\n            }).then((response) => response.json())\r\n                .then((resJson) => playlistID = resJson.id)\r\n                .then(() => {\r\n                    fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {\r\n                        method: 'POST',\r\n                        headers: headerAuth,\r\n                        body: JSON.stringify({uris: trackURIs})\r\n                    }).then((response) => response.json)\r\n                        .then(resJson => resJson['snapshot_id']);\r\n                })\r\n        });\r\n        */\r\n\r\n        // second variant\r\n        (async () => {\r\n            try {\r\n                const response1 = await fetch('https://api.spotify.com/v1/me', {\r\n                    headers: headerAuth\r\n                });\r\n                if (response1.ok) {\r\n                    const jsonResponse1 = await response1.json();\r\n                    userId = jsonResponse1.id;\r\n                    console.log('Userid: ' + userId);\r\n                }\r\n\r\n                const response2 = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                    method: 'POST',\r\n                    headers: headerAuth,\r\n                    body: JSON.stringify({name: playlist})\r\n                });\r\n                if (response2.ok) {\r\n                    const jsonResponse2 = await response2.json();\r\n                    playlistID = jsonResponse2.id;\r\n                    console.log('playlistId: ' + playlistID);\r\n                }\r\n\r\n                const response3 = await fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {\r\n                    method: 'POST',\r\n                    headers: headerAuth,\r\n                    body: JSON.stringify({uris: trackURIs})\r\n                });\r\n                if (response3.ok) {\r\n                    const jsonResponse3 = await response3.json();\r\n                    return jsonResponse3['snapshot_id'];\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n            }\r\n        })();\r\n    }\r\n\r\n    return {\r\n        getAccessToken: getAccessToken,\r\n        search: search,\r\n        savePlaylist: savePlaylist\r\n    };\r\n\r\n}());\r\n\r\nexport default Spotify;","import React from 'react';\nimport './App.css';\nimport { SearchResults } from \"../SearchResults/SearchResults\";\nimport { Playlist } from \"../Playlist/Playlist\";\nimport { SearchBar } from \"../SearchBar/SearchBar\";\nimport  Spotify from '../../util/Spotify';\n\nSpotify.getAccessToken();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      /*searchResults: [{name: 'Hungry - Remix', artist: 'Niklas Ibach', album: 'unknown', id: 5},\n        {name: 'Prayer in C', artist: 'Lilly Wood & The Pricks', album: 'cool', id: 6}],*/\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n      /*playlistTracks: [{name: 'Follow you', artist: 'twocolors', album: 'unknown', id: 1},\n                       {name: 'Fade', artist: 'Alan Walker', album: 'Best', id: 2},\n                       {name: 'Under the Sun', artist: 'Miskeyz', album: 'unknown', id: 3},\n                       {name: 'To California', artist: 'J Lisk', album: 'anything', id: 4}]*/\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    if (!this.state.playlistTracks.find((savedTrack) => {return savedTrack.id === track.id})) {\n      let newPlaylistTracks = this.state.playlistTracks;\n      newPlaylistTracks.push({name: track.name, artist: track.artist, album: track.album, id: track.id, uri: track.uri});\n      this.setState({\n        playlistTracks: newPlaylistTracks\n      });\n    }\n  }\n\n  removeTrack(track) {\n    const trackIndex = this.state.playlistTracks.findIndex((savedTrack) => {return savedTrack.id === track.id});\n    if (trackIndex !== -1) {\n      let newPlaylist = this.state.playlistTracks;\n      newPlaylist.splice(trackIndex,1);\n      this.setState({\n        playlistTracks: newPlaylist\n      });\n    }\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  }\n\n  savePlaylist() {\n    console.log(this.state.playlistTracks.map((track) => track.uri));\n    Spotify.savePlaylist(this.state.playlistName, this.state.playlistTracks.map(track => track.uri));\n  }\n\n  search(searchTerm) {\n      Spotify.search(searchTerm).then((res) => {\n          console.log(res);\n          this.setState({\n              searchResults: res\n          });\n      });\n  }\n\n  render() {\n    return (\n        <div>\n          <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n          <div className=\"App\">\n            {/*\n            <!-- Add a SearchBar component --> */}\n            <SearchBar onSearch={this.search} />\n            <div className=\"App-playlist\">\n              {/*\n              <!-- Add a SearchResults component --> */}\n              <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n              {/*\n              <!-- Add a Playlist component --> */}\n              <Playlist playlistName={this.state.playlistName}\n                        playlistTracks={this.state.playlistTracks}\n                        onRemove={this.removeTrack}\n                        onNameChange={this.updatePlaylistName}\n                        onSave={this.savePlaylist}\n                        />\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}